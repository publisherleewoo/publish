html request -> http 프로토콜에따라 head,body로 response

stram으로 html을 받으면 그때 브라우저에서 Dom으로 파싱

동시에 css도 cssom으로 파싱

Dom과 css가 만나 rendering ->layout -> paint
 

ex)

head내부는 병렬로 로딩

body내부에 style이나 script를 만나면 block현상일어나서 랜더링될때까지 화면이 하얘짐.



<결론>

css는 head 안에

스크립트는 body안에  

script는 defer 이런 속성이 있으나 크로스브라우징 문제,

css 내부에서 이미지,font를 받는것보다

<link rel="preload" href="">를 사용하여 미리 로딩

ex)
<link rel="preload" href="https://fonts.googleapis.com/css?family=Roboto" as="font" crossorigin>

<link rel="preload" href="./style.css" as="style" crossorigin>  




번외) 인터렉션
(main thread 건들지말기.)
js로 dom을 건들면 기본적으로 matin thread에 의해 rendering pipeline이 동작

랜더링 파이프라인: js->style->layout->paint->composite
style:dom의 최종 스타일 계산 (개발자도구 computed에 있는것)
layout:dom의 배치와 크기 계산
paint:화면에 그리기
composite:레이어 조합하기 (GPU의 도움을받는다. css3의 translate, animation, position:fixed 등등...)

결론)css로 할수있는것은 css로하자